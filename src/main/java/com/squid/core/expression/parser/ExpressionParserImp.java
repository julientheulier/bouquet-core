/* Generated By:JavaCC: Do not edit this line. ExpressionParserImp.java */
package com.squid.core.expression.parser;

import java.io.StringReader;
import java.util.*;
import com.squid.core.expression.*;
import com.squid.core.expression.scope.*;

public class ExpressionParserImp
extends ExpressionParser implements ExpressionParserImpConstants {

        public ExpressionParserImp(ExpressionScope scope, String text) {
                this(new StringReader(text));
                this.scope = scope;
        }

        /*
	public ConstantExpression parseConstant(ExpressionScope scope) throws ParseException {
		return constant(scope);
	}
	*/

        public ExpressionAST parseExpression() throws ParseException {
                return expression(scope);
        }

        protected ExpressionAST createRawOperator(int operatorKind, ExpressionAST expression, ExpressionAST sub) throws ScopeException {
                ExpressionAST result = null;
                switch (operatorKind) {
                        case PLUS:
                                result = scope.createSigmaOperator(expression,sub);
                                break;
                        case MINUS:
                                result = scope.createOperator("SUBTRACTION",expression,sub);
                                break;
                        case DIVIDE:
                                result = scope.createOperator("DIVIDE",expression,sub);
                                break;
                        case MULTIPLY:
                                result = scope.createOperator("MULTIPLY",expression,sub);
                                break;
                        case LESSTHAN:
                                result = scope.createOperator("LESS",expression,sub);
                                break;
                        case LESSOREQUALTHAN:
                                result = scope.createOperator("LESS_OR_EQUAL",expression,sub);
                                break;
                        case GREATERTHAN:
                                result = scope.createOperator("GREATER",expression,sub);
                                break;
                        case GREATEROREQUALTHAN:
                                result = scope.createOperator("GREATER_OR_EQUAL",expression,sub);
                                break;
                        case EQUAL:
                                result = scope.createOperator("EQUAL",expression,sub);
                                break;
                        case NOTEQUAL:
                                result = scope.createOperator("NOT_EQUAL",expression,sub);
                                break;
                        case AND:
                                result = scope.createOperator("AND",expression,sub);
                                break;
                        case OR:
                                result = scope.createOperator("OR",expression,sub);
                                break;
                        case MODULO:
                                result = scope.createOperator("MODULO",expression,sub);
                                break;
                        case EXPONENTIATE:
                                result = scope.createOperator("EXPONENTIATE",expression,sub);
                                break;
                }
                return result;
        }

        protected Operator createInfixOperator(int operatorKind) throws ScopeException {
                switch (operatorKind) {
                        case PLUS:
                                return scope.createOperator("PLUS");
                        case MINUS:
                                return scope.createOperator("SUBTRACTION");
                        case DIVIDE:
                                return scope.createOperator("DIVIDE");
                        case MULTIPLY:
                                return scope.createOperator("MULTIPLY");
                        case LESSTHAN:
                                return scope.createOperator("LESS");
                        case LESSOREQUALTHAN:
                                return scope.createOperator("LESS_OR_EQUAL");
                        case GREATERTHAN:
                                return scope.createOperator("GREATER");
                        case GREATEROREQUALTHAN:
                                return scope.createOperator("GREATER_OR_EQUAL");
                        case EQUAL:
                                return scope.createOperator("EQUAL");
                        case NOTEQUAL:
                                return scope.createOperator("NOT_EQUAL");
                        case AND:
                                return scope.createOperator("AND");
                        case OR:
                                return scope.createOperator("OR");
                        case MODULO:
                                return scope.createOperator("MODULO");
                        case EXPONENTIATE:
                                return scope.createOperator("EXPONENTIATE");
                        default:
                                return scope.createOperator("UNDEFINED");
                }
        }

  final public ExpressionAST expression(ExpressionScope scope) throws ParseException {
        ExpressionAST expression;
        Token identifier = null;
    expression = expression_X(scope);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      identifier = extended_identifier();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(0);
          if (identifier!=null)
          {
        expression.setName(identifier.image);
          }
          {if (true) return expression;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST expression_X(ExpressionScope scope) throws ParseException {
        ArrayList<ExpressionOperatorPair> L2 = null;
    L2 = expressionL2(scope);
                {if (true) return buildExpression(L2);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<ExpressionOperatorPair> expressionL2(ExpressionScope scope) throws ParseException {
        ExpressionAST expression;
        Operator operator = null;
        ArrayList<ExpressionOperatorPair> sub = null;
    expression = signed_expression(scope);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case EXPONENTIATE:
    case MULTIPLY:
    case DIVIDE:
    case LESSTHAN:
    case LESSOREQUALTHAN:
    case GREATERTHAN:
    case GREATEROREQUALTHAN:
    case OR:
    case AND:
    case EQUAL:
    case NOTEQUAL:
    case MODULO:
    case IDENTIFIER:
      operator = infix_operator();
      sub = expressionL2(scope);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
                if (operator==null) {
                        sub = new ArrayList<ExpressionOperatorPair>(2);
                        sub.add(new ExpressionOperatorPair(expression));
                        {if (true) return sub;}
                } else {
                        sub.add(0,new ExpressionOperatorPair(expression,operator));
                        {if (true) return sub;}
                }
    throw new Error("Missing return statement in function");
  }

  final public Token extended_identifier() throws ParseException {
        Token t1;
    t1 = jj_consume_token(STRING_IDENTIFIER);
                {if (true) return removeSurrounding(t1);}
    throw new Error("Missing return statement in function");
  }

  final public Operator infix_operator() throws ParseException {
        Token operator;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case EXPONENTIATE:
    case MULTIPLY:
    case DIVIDE:
    case LESSTHAN:
    case LESSOREQUALTHAN:
    case GREATERTHAN:
    case GREATEROREQUALTHAN:
    case OR:
    case AND:
    case EQUAL:
    case NOTEQUAL:
    case MODULO:
      operator = infix_token();
                                 {if (true) return createInfixOperator(operator.kind);}
      break;
    case IDENTIFIER:
      operator = jj_consume_token(IDENTIFIER);
                                {if (true) return createInfixOperator(operator.image);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Token infix_token() throws ParseException {
        Token operator;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      operator = jj_consume_token(PLUS);
                              {if (true) return operator;}
      break;
    case MINUS:
      operator = jj_consume_token(MINUS);
                               {if (true) return operator;}
      break;
    case DIVIDE:
      operator = jj_consume_token(DIVIDE);
                                {if (true) return operator;}
      break;
    case MULTIPLY:
      operator = jj_consume_token(MULTIPLY);
                                  {if (true) return operator;}
      break;
    case LESSTHAN:
      operator = jj_consume_token(LESSTHAN);
                                  {if (true) return operator;}
      break;
    case LESSOREQUALTHAN:
      operator = jj_consume_token(LESSOREQUALTHAN);
                                         {if (true) return operator;}
      break;
    case GREATERTHAN:
      operator = jj_consume_token(GREATERTHAN);
                                     {if (true) return operator;}
      break;
    case GREATEROREQUALTHAN:
      operator = jj_consume_token(GREATEROREQUALTHAN);
                                            {if (true) return operator;}
      break;
    case EQUAL:
      operator = jj_consume_token(EQUAL);
                               {if (true) return operator;}
      break;
    case NOTEQUAL:
      operator = jj_consume_token(NOTEQUAL);
                                  {if (true) return operator;}
      break;
    case AND:
      operator = jj_consume_token(AND);
                             {if (true) return operator;}
      break;
    case OR:
      operator = jj_consume_token(OR);
                            {if (true) return operator;}
      break;
    case MODULO:
      operator = jj_consume_token(MODULO);
                                {if (true) return operator;}
      break;
    case EXPONENTIATE:
      operator = jj_consume_token(EXPONENTIATE);
                                      {if (true) return operator;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST signed_expression(ExpressionScope scope) throws ParseException {
        ExpressionAST simple;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      simple = simple_expression(scope);
                {if (true) return createOperator(scope,"MINUS",simple);}
      break;
    case AROBASE:
    case SHARP:
    case DOLLAR:
    case NULL:
    case TRUE:
    case FALSE:
    case DATE:
    case INTEGER:
    case STRING_LITERAL:
    case STRING_IDENTIFIER:
    case IDENTIFIER:
    case SHORTCUT_IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
      simple = simple_expression(scope);
                {if (true) return simple;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST simple_expression(ExpressionScope scope) throws ParseException {
        ExpressionAST expression;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
      expression = null_constant(scope);
      break;
    case TRUE:
    case FALSE:
      expression = boolean_constant(scope);
      break;
    case DATE:
      expression = date_constant(scope);
      break;
    case INTEGER:
    case STRING_LITERAL:
      expression = primitive_constant(scope);
      break;
    case IDENTIFIER:
      expression = apply_operator(scope);
      break;
    case LPAREN:
      expression = group_expression(scope);
      break;
    case LBRACE:
      expression = vector_expression(scope);
      break;
    case SHARP:
      expression = column_reference(scope);
      break;
    case AROBASE:
    case DOLLAR:
    case STRING_IDENTIFIER:
    case SHORTCUT_IDENTIFIER:
    case LBRACKET:
      if (jj_2_2(2147483647)) {
        expression = compose_path(scope);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_IDENTIFIER:
          expression = attribute_reference(scope);
          break;
        case AROBASE:
          if (jj_2_1(2147483647)) {
            expression = short_typed_reference(scope);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case AROBASE:
              expression = id_reference(scope);
              break;
            default:
              jj_la1[5] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        case LBRACKET:
          expression = typed_reference(scope);
          break;
        case DOLLAR:
          expression = parameter_reference(scope);
          break;
        case SHORTCUT_IDENTIFIER:
          expression = shortcut_reference(scope);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return expression;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST vector_expression(ExpressionScope scope) throws ParseException {
        ExpressionAST head;
        List tail=null;
    jj_consume_token(LBRACE);
    head = expression_X(scope);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      tail = expression_list(scope);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
                if (tail==null) tail = new ArrayList();
                tail.add(0,head);
                {if (true) return createOperator(scope,"VECTOR",tail);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST group_expression(ExpressionScope scope) throws ParseException {
        ExpressionAST expr;
    jj_consume_token(LPAREN);
    expr = expression_X(scope);
    jj_consume_token(RPAREN);
                {if (true) return createOperator(scope,"GROUP",expr);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST null_constant(ExpressionScope scope) throws ParseException {
        ExpressionAST expr;
    jj_consume_token(NULL);
                {if (true) return scope.createNullValue();}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST boolean_constant(ExpressionScope scope) throws ParseException {
        ExpressionAST constant;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      constant = true_constant(scope);
      break;
    case FALSE:
      constant = false_constant(scope);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return constant;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST true_constant(ExpressionScope scope) throws ParseException {
    jj_consume_token(TRUE);
                {if (true) return createConstant(scope,true);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST false_constant(ExpressionScope scope) throws ParseException {
    jj_consume_token(FALSE);
                {if (true) return createConstant(scope,false);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST date_constant(ExpressionScope scope) throws ParseException {
        Token year,month,day;
        Token date;
        Token decimal = null;
    jj_consume_token(DATE);
    jj_consume_token(LPAREN);
    date = jj_consume_token(STRING_LITERAL);
    jj_consume_token(RPAREN);
                //String y = year.image;
                //String m = month.image;
                //String d = day.image;
                //return scope.createDateConstantValue(y,m,d);
                String image = date.image;
                if (image.length()>1) {
                        {if (true) return scope.createDateConstantValue(image.substring(1,image.length()-1));}
                } else {
                        {if (true) throw new ParseException("invalid date format");}
                }
    throw new Error("Missing return statement in function");
  }

  final public ConstantValue primitive_constant(ExpressionScope scope) throws ParseException {
        ConstantValue constant;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      constant = numerical_constant(scope);
      break;
    case STRING_LITERAL:
      constant = string_constant(scope);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return constant;}
    throw new Error("Missing return statement in function");
  }

  final public ConstantValue numerical_constant(ExpressionScope scope) throws ParseException {
        Token identifier;
        Token decimal = null;
    identifier = jj_consume_token(INTEGER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      decimal = jj_consume_token(INTEGER);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
                String image = identifier.image;
                if (decimal!=null) {
                        image += "."+decimal.image;
                }
                {if (true) return scope.createNumericalConstantValue(image);}
    throw new Error("Missing return statement in function");
  }

  final public ConstantValue string_constant(ExpressionScope scope) throws ParseException {
        Token identifier;
    identifier = jj_consume_token(STRING_LITERAL);
                String image = identifier.image;
                {if (true) return scope.createStringConstantValue(image);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST compose_path(ExpressionScope scope) throws ParseException {
    ExpressionAST first = null;
    ExpressionAST second = null;
    first = composable_expression(scope);
    jj_consume_token(DOT);
    second = simple_expression(scope.applyExpression(first));
        if (second!=null) {
            {if (true) return scope.createCompose(first,second);}
        } else {
            {if (true) return first;}
        }
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST composable_expression(ExpressionScope scope) throws ParseException {
  ExpressionAST expr = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_IDENTIFIER:
      expr = composable_attribute_reference(scope);
      break;
    case AROBASE:
      if (jj_2_3(2147483647)) {
        expr = short_typed_reference(scope);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AROBASE:
          expr = id_reference(scope);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case LBRACKET:
      expr = typed_reference(scope);
      break;
    case DOLLAR:
      expr = parameter_reference(scope);
      break;
    case SHORTCUT_IDENTIFIER:
      expr = shortcut_reference(scope);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST composable_attribute_reference(ExpressionScope scope) throws ParseException {
    Token identifier;
    identifier = extended_identifier();
        String image = identifier.image;
        Object attr = scope.lookupComposableObject(IdentifierType.DEFAULT,image);
        {if (true) return bindIdentifier(scope.createReferringExpression(attr),identifier,IdentifierType.DEFAULT);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST attribute_reference(ExpressionScope scope) throws ParseException {
        Token identifier;
    identifier = extended_identifier();
                String image = identifier.image;
                Object attr = scope.lookupObject(IdentifierType.DEFAULT,image);
                {if (true) return bindIdentifier(scope.createReferringExpression(attr),identifier,IdentifierType.DEFAULT);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST column_reference(ExpressionScope scope) throws ParseException {
        Token identifier;
    jj_consume_token(SHARP);
    identifier = extended_identifier();
                String image = identifier.image;
                Object column = scope.lookupObject(IdentifierType.COLUMN,image);
                {if (true) return bindPrefixedIdentifier(scope.createReferringExpression(column),identifier,IdentifierType.COLUMN);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST parameter_reference(ExpressionScope scope) throws ParseException {
        Token identifier;
    jj_consume_token(DOLLAR);
    identifier = extended_identifier();
                String image = identifier.image;
                Object column = scope.lookupObject(IdentifierType.PARAMETER,image);
                {if (true) return bindPrefixedIdentifier(scope.createReferringExpression(column),identifier,IdentifierType.PARAMETER);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST shortcut_reference(ExpressionScope scope) throws ParseException {
    Token identifier;
    identifier = jj_consume_token(SHORTCUT_IDENTIFIER);
        String image = identifier.image;
        Object column = scope.lookupObject(IdentifierType.PARAMETER,image);
        {if (true) return bindPrefixedIdentifier(scope.createReferringExpression(column),identifier,IdentifierType.PARAMETER);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST id_reference(ExpressionScope scope) throws ParseException {
        Token identifier;
    jj_consume_token(AROBASE);
    identifier = extended_identifier();
                String image = identifier.image;
                Object instance = scope.lookupObject(IdentifierType.IDENTIFIER,image);
                {if (true) return bindPrefixedIdentifier(scope.createReferringExpression(instance),identifier,IdentifierType.IDENTIFIER);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST short_typed_reference(ExpressionScope scope) throws ParseException {
    Token type;
    Token identifier;
    jj_consume_token(AROBASE);
    type = jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    identifier = extended_identifier();
        IdentifierType identifierType = scope.lookupIdentifierType(type.image);
        Object instance = scope.lookupObject(identifierType,identifier.image);
        {if (true) return bindTypedIdentifier(scope.createReferringExpression(instance),identifier,identifierType);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST typed_reference(ExpressionScope scope) throws ParseException {
        Token type;
        Token identifier;
    jj_consume_token(LBRACKET);
    type = jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    identifier = extended_identifier();
    jj_consume_token(RBRACKET);
                IdentifierType identifierType = scope.lookupIdentifierType(type.image);
                Object instance = scope.lookupObject(identifierType,identifier.image);
                {if (true) return bindTypedIdentifier(scope.createReferringExpression(instance),identifier,identifierType);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST apply_operator(ExpressionScope scope) throws ParseException {
        Token identifier;
        List args=null;
    identifier = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case AROBASE:
    case SHARP:
    case DOLLAR:
    case NULL:
    case TRUE:
    case FALSE:
    case DATE:
    case INTEGER:
    case STRING_LITERAL:
    case STRING_IDENTIFIER:
    case IDENTIFIER:
    case SHORTCUT_IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
      args = expression_list(scope);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                String fun = identifier.image;
                {if (true) return createOperator(scope,fun,args);}
    throw new Error("Missing return statement in function");
  }

  final public List expression_list(ExpressionScope scope) throws ParseException {
        ExpressionAST head;
        List tail=null;
    head = expression_X(scope);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      tail = expression_list(scope);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
                if (tail==null) tail = new ArrayList();
                tail.add(0,head);
                {if (true) return tail;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionAST sigma_expression(ExpressionScope scope) throws ParseException {
        ExpressionAST first;
        ExpressionAST second;
    first = simple_expression(scope);
    jj_consume_token(PLUS);
    second = expression_X(scope);
                {if (true) return scope.createSigmaOperator(first,second);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(AROBASE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_4() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(STRING_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) return true;
    }
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(AROBASE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_2() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_2()) {
    jj_scanpos = xsp;
    if (jj_3R_3()) {
    jj_scanpos = xsp;
    if (jj_3R_4()) {
    jj_scanpos = xsp;
    if (jj_3R_5()) {
    jj_scanpos = xsp;
    if (jj_3R_6()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(AROBASE)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_1()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(AROBASE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(SHORTCUT_IDENTIFIER)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ExpressionParserImpTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000000,0x47ffc00,0x47ffc00,0x47ffc00,0xca800800,0x800000,0x8800000,0xca800000,0x0,0x80000000,0x0,0x0,0x800000,0x8800000,0xca800800,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x80,0x80,0x0,0x55f3,0x0,0x4140,0x55f3,0x20000,0x1,0x30,0x40000,0x0,0x4140,0x55f3,0x20000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ExpressionParserImp(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ExpressionParserImp(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExpressionParserImpTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ExpressionParserImp(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExpressionParserImpTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ExpressionParserImp(ExpressionParserImpTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ExpressionParserImpTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[51];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
