/*******************************************************************************
 * Copyright Â© Squid Solutions, 2016
 *
 * This file is part of Open Bouquet software.
 *  
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation (version 3 of the License).
 *
 * There is a special FOSS exception to the terms and conditions of the 
 * licenses as they are applied to this program. See LICENSE.txt in
 * the directory of this program distribution.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Squid Solutions also offers commercial licenses with additional warranties,
 * professional functionalities or services. If you purchase a commercial
 * license, then it supersedes and replaces any other agreement between
 * you and Squid Solutions (above licenses and LICENSE.txt included).
 * See http://www.squidsolutions.com/EnterpriseBouquet/
 *******************************************************************************/
/* Generated By:JavaCC: Do not edit this line. ExpressionParserImpConstants.java */
package com.squid.core.expression.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ExpressionParserImpConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PLUS = 10;
  /** RegularExpression Id. */
  int MINUS = 11;
  /** RegularExpression Id. */
  int EXPONENTIATE = 12;
  /** RegularExpression Id. */
  int MULTIPLY = 13;
  /** RegularExpression Id. */
  int DIVIDE = 14;
  /** RegularExpression Id. */
  int LESSTHAN = 15;
  /** RegularExpression Id. */
  int LESSOREQUALTHAN = 16;
  /** RegularExpression Id. */
  int GREATERTHAN = 17;
  /** RegularExpression Id. */
  int GREATEROREQUALTHAN = 18;
  /** RegularExpression Id. */
  int OR = 19;
  /** RegularExpression Id. */
  int AND = 20;
  /** RegularExpression Id. */
  int EQUAL = 21;
  /** RegularExpression Id. */
  int NOTEQUAL = 22;
  /** RegularExpression Id. */
  int AROBASE = 23;
  /** RegularExpression Id. */
  int AMPERSAND = 24;
  /** RegularExpression Id. */
  int SHARP = 25;
  /** RegularExpression Id. */
  int MODULO = 26;
  /** RegularExpression Id. */
  int DOLLAR = 27;
  /** RegularExpression Id. */
  int NULL = 28;
  /** RegularExpression Id. */
  int TRUE = 29;
  /** RegularExpression Id. */
  int FALSE = 30;
  /** RegularExpression Id. */
  int DIGIT = 31;
  /** RegularExpression Id. */
  int LETTER = 32;
  /** RegularExpression Id. */
  int INTEGER = 33;
  /** RegularExpression Id. */
  int STRING_LITERAL = 34;
  /** RegularExpression Id. */
  int STRING_IDENTIFIER = 35;
  /** RegularExpression Id. */
  int IDENTIFIER = 36;
  /** RegularExpression Id. */
  int SPECIAL_IDENTIFIER = 37;
  /** RegularExpression Id. */
  int LPAREN = 38;
  /** RegularExpression Id. */
  int RPAREN = 39;
  /** RegularExpression Id. */
  int LBRACE = 40;
  /** RegularExpression Id. */
  int RBRACE = 41;
  /** RegularExpression Id. */
  int LBRACKET = 42;
  /** RegularExpression Id. */
  int RBRACKET = 43;
  /** RegularExpression Id. */
  int SEMICOLON = 44;
  /** RegularExpression Id. */
  int COMMA = 45;
  /** RegularExpression Id. */
  int DOT = 46;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"/*\"",
    "<token of kind 6>",
    "<token of kind 7>",
    "\"*/\"",
    "<token of kind 9>",
    "\"+\"",
    "\"-\"",
    "\"**\"",
    "\"*\"",
    "\"/\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "<OR>",
    "<AND>",
    "\"=\"",
    "\"!=\"",
    "\"@\"",
    "\"&\"",
    "\"#\"",
    "\"%\"",
    "\"$\"",
    "\"NULL\"",
    "\"TRUE\"",
    "\"FALSE\"",
    "<DIGIT>",
    "<LETTER>",
    "<INTEGER>",
    "<STRING_LITERAL>",
    "<STRING_IDENTIFIER>",
    "<IDENTIFIER>",
    "<SPECIAL_IDENTIFIER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"DATE(\"",
    "\":\"",
  };

}
